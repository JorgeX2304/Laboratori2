from sklearn.datasets import make_blobs
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score, silhouette_samples
import matplotlib as mpl
from matplotlib.ticker import FixedLocator, FixedFormatter

def generar_blobs_separados(n_samples=2000, n_centers_min=1, n_centers_max=20, min_distance=5, random_state=None):
    """Genera blobs con un número aleatorio de centros bien separados."""
    rng = np.random.RandomState(random_state)
    n_centers = rng.randint(n_centers_min, n_centers_max + 1)
    centers = []
    while len(centers) < n_centers:
        new_center = rng.uniform(low=-10, high=10, size=(2,))
        valid = True
        for center in centers:
            if np.linalg.norm(new_center - center) < min_distance:
                valid = False
                break
        if valid:
            centers.append(new_center)
    centers = np.array(centers)
    std = np.repeat(0.7, n_centers)  # Desviación estándar constante para todos los blobs
    X, y = make_blobs(n_samples=n_samples, centers=centers, cluster_std=std, random_state=rng)
    return X, y, centers

# Generar un nuevo dataset con centros aleatorios y separados
X, y_true, blob_centers_generados = generar_blobs_separados(n_samples=2000, random_state=42)

# Visualización del dataset generado
plt.figure(figsize=(8, 4))
plt.scatter(X[:, 0], X[:, 1], c=y_true, s=1, cmap='viridis') # Usamos y_true para colorear si está disponible
plt.scatter(blob_centers_generados[:, 0], blob_centers_generados[:, 1], marker='*', s=200, color='red', label='Centroids Generados')
plt.xlabel("$x_1$", fontsize=14)
plt.ylabel("$x_2$", fontsize=14, rotation=0)
plt.title("Dataset Generado Aleatoriamente con Centros Separados")
plt.legend()
plt.show()

# Aplicación de K-Means con el número "verdadero" de clusters
k_true = len(blob_centers_generados)
kmeans_true_k = KMeans(n_clusters=k_true, random_state=42, n_init=10)
y_pred_true_k = kmeans_true_k.fit_predict(X)

plt.figure(figsize=(8, 4))
plot_decision_boundaries(kmeans_true_k, X)
plt.scatter(blob_centers_generados[:, 0], blob_centers_generados[:, 1], marker='*', s=200, color='red', label='Centroids Generados')
plt.title(f"K-Means con k={k_true}")
plt.legend()
plt.show()

# Evaluación con Silhouette Score para el número "verdadero" de clusters
silhouette_avg_true_k = silhouette_score(X, y_pred_true_k)
print(f"Silhouette Score para k={k_true}: {silhouette_avg_true_k:.4f}")

# Encontrar el número óptimo de clusters usando Silhouette Score
kmeans_per_k = [KMeans(n_clusters=k, random_state=42, n_init=10).fit(X) for k in range(2, 15)] # Rango de clusters a probar
silhouette_scores = [silhouette_score(X, model.labels_) for model in kmeans_per_k]

plt.figure(figsize=(8, 3))
plt.plot(range(2, 15), silhouette_scores, "bo-")
plt.xlabel("$k$", fontsize=14)
plt.ylabel("Silhouette score", fontsize=14)
plt.title("Silhouette Score vs. Número de Clusters")
plt.grid(True)
plt.show()

# Visualización detallada del Silhouette Score para algunos valores de k
plt.figure(figsize=(11, 9))
range_n_clusters = [k_true - 1, k_true, k_true + 1] # Visualizar alrededor del k verdadero (ajustar según sea necesario)
for i, n_clusters in enumerate(range_n_clusters):
    if n_clusters < 2:
        continue
    plt.subplot(2, 2, i + 1)
    kmeans = KMeans(n_clusters=n_clusters, random_state=42, n_init=10)
    y_pred = kmeans.fit_predict(X)
    silhouette_coefficients = silhouette_samples(X, y_pred)

    padding = len(X) // 30
    pos = padding
    ticks = []
    for j in range(n_clusters):
        coeffs = silhouette_coefficients[y_pred == j]
        coeffs.sort()

        color = mpl.cm.Spectral(j / n_clusters)
        plt.fill_betweenx(np.arange(pos, pos + len(coeffs)), 0, coeffs,
                          facecolor=color, edgecolor=color, alpha=0.7)
        ticks.append(pos + len(coeffs) // 2)
        pos += len(coeffs) + padding

    plt.gca().yaxis.set_major_locator(FixedLocator(ticks))
    plt.gca().yaxis.set_major_formatter(FixedFormatter(range(n_clusters)))
    plt.gca().set_xlim([-0.1, 1])
    plt.yticks([])  # Ocultar etiquetas del eje y para mejor visualización en subplots
    plt.xlabel("Silhouette Coefficient")
    plt.title(f"k={n_clusters}")
    plt.axvline(x=silhouette_scores[n_clusters - 2] if n_clusters > 1 and n_clusters <= len(silhouette_scores) + 1 else -1, color="red", linestyle="--")

plt.tight_layout()
plt.show()
